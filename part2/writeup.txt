Part 2 Write Up by Sasha Morgan

Crash 1:

I have always personally had issues with memory allocation in C and C++.  These errors plagued my undergrad career, thus 
my initial bug finding process was to look for Seg Fault and Memory allocations issues.  Based on the main function first argument
call of gift card reader, I decided to start with this function.  Looking into the function there are two areas that caught my attention.  The mallac of the size of the struct and the num_bytes memory calls.
Based on the giftcardreader usage of num_bytes, became the target of focus for this attack.  Based on the informatiion provided by the giftcardexample writer.
Num_bytes is not allocated dynamically, rather based on the hard coded value provided by the designer.  Making num_bytes a possible area for where a bug can happen.

The following section of code is a pontential bug inside of the struct this_gift_card *gift_card_reader(FILE *input_fd):

        ptr = malloc(ret_val->num_bytes);
        fread(ptr, ret_val->num_bytes, 1, input_fd);

        optr = ptr - 4;

Passing a negative num_bytes into malloc will cause the malloc to allocate a larger size or null value depending on the negative integer inputed.  This isn't a huge issue,
until the memory location is accessed which happens in the next line during the fread call.  This will result in a null or 0 values as the memory cannot be accessed properly.
then optr = 0-4 causing further memory issues as the optr pointer now becomes a negative value.  Thus causing a segmentation fault.

Thus for Crash1.gft, I changed the Num_bytes from 116 to -116.

The following results appeared when I tried to run the giftcardreader on the file:
(base) sashamorgan@Sashas-MBP App-Sec-Project-1 % ./giftcardreader 1 crash1.gft
zsh: segmentation fault  ./giftcardreader 1 crash1.gft

The patch for this bug is rather simple, adding a check to make sure the ptr->num_bytes is greater than 0 should fix the issue. 
The patched code is the following:
if (ret_val->num_bytes > 0)
    {
        // Make something the size of the rest and read it in
        ptr = malloc(ret_val->num_bytes);

        fread(ptr, ret_val->num_bytes, 1, input_fd);

        optr = ptr - 4;
        ...
    }
else{
    printf("Error:  Gift Card data contains a Bytes allocation that is less than 0, please try again.\n");
    exit(0);
}

Crash 2:

Based on a suggestion from the assignment instructions, I started to look into the Program and Message fields that can be added
to the giftcard when the record type is 3.  I started to mess around with input file by adding special characters and attempting to overflow
the 16 registers set in the animated function which is called in record type 3.  The program counter in this test case has the value \the 16 registers set in the animated function which is called in record type 3.  T
he program counter in this test case has the value \x01<?>, the extra character will not type in txt editor.  The argument value thus becomes \xec which is more than the 16 registers can handle.  This causes a segmentation fault.
The program does not fail at this point, but rather latern in the code when the number of records is called again, the stack values are incorrect and well above the allowed limit.

To fix this error I added a small check to two places, the first is with the for (int i = 0; i < gcd_ptr->number_of_gift_card_records; i++) inside the print giftcardinfo function.
I added another variable called original i that is always 1+ the i value before the animate call.  The error caused by the seg fault in animate changes the i counter to a larger number as well.  In addition I added checks to both the 
Case 1 and 4 in the animate function.  I check to see if their arg1 or arg2 values are greater than 16.  If the values are greater than 16 this will cause a seg fault later in the code.  Although my crash2.gft targets arg1, the same error
can appear in arg2 as well, so I tried to cover both cases.

See Code Here:
            if (i != originali)
            {
                printf("Stack Corruption Issue:  Please Check your giftcard\n");
                exit(0);
            }
            originali = originali + 1;



Hang:

Based on the information provided by the assignment, the best way to crash the program would be in the animate function.  Looking through the animate function
when the PC is at case nine it moves to the next argument value.  Thus this argument value looked like a great place to start hacking.  The idea for the test case is
to find someway for the argument counter to become a loop.  First step would be to corrupt the memory in a way that results in a repeated call to case 9.  To do this I 
buffer overflowed my program and message area with special character and values that lead to test case 9.  When the bufferoverflow happens the target this cause the one of the consecutive
0x09 to be called over and over again.

To fix this issue under case 9, I added a negative pc value check to make sure the resulting pc value always goes forwards.  If it doesnt then this will cause a loop.
        case 0x09:
            pc += (char)arg1;
            if (pc > 0)
            {
                printf("Stack Corruption Issue:  Please Check your giftcard.  This program tried to be loopy.\n");

                exit(0);
            }
            break;
